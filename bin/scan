#!/bin/bash
# @parseArger-begin
# @parseArger-help "Scan a directory for existing projects" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-declarations
# @parseArger pos directory "The directory to scan for projects"
# @parseArger opt config-dir "pjt config directory"
# @parseArger flag add-all "Flag to add all found projects"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_directory="";
# OPTIONALS ARGUMENTS
_arg_config_dir=
# FLAGS
_arg_add_all="off"
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "Scan a directory for existing projects:"
	echo -e "	directory: The directory to scan for projects"
	echo -e "	--config-dir <config-dir>: pjt config directory"
	echo -e "	--add-all|--no-add-all: Flag to add all found projects"
	echo -e "Usage :
	$0 <directory> [--config-dir <value>] [--[no-]add-all]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--config-dir)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_config_dir="$2"
				shift
				;;
			--config-dir=*)
				_arg_config_dir="${_key##--config-dir=}"
				;;
			
			--add-all)
				_arg_add_all="on"
				;;
			--no-add-all)
				_arg_add_all="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="directory"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_directory ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	directory: ${_arg_directory}";
	echo -e "	config-dir: ${_arg_config_dir}";
	echo -e "	add-all: ${_arg_add_all}";

}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

# Load common functions
source "$(dirname "$0")/common"

# Ensure the required argument is provided
if [ -z "$_arg_directory" ]; then
  log "Error: directory is required" -1
  exit 1
fi


log "Scanning directory: $_arg_directory" 1

# Ensure the directory exists
if [ ! -d "$_arg_directory" ]; then
  log "Error: The directory does not exist" -1
  exit 1
fi

# Ensure the configuration file exists
config_path="$(get_config_path "$_arg_config_dir")"
if [ ! -f "$config_path" ]; then
  log "No configuration file found at $config_path" -1
  exit 1
fi

# Scan the directory for git projects
for project_path in "$_arg_directory"/*; do
  if [ -d "$project_path/.git" ]; then
    project_name=$(basename "$project_path")
    log "Found git project: $project_name" 1

    # Check if the project is already in the configuration
    existing_project=$(yq eval ".projects[] | select(.path == \"$project_path\")" "$config_path")
    if [ -n "$existing_project" ]; then
      log "Project $project_name is already in the configuration" 1
    elif [ "$_arg_add_all" = "on" ]; then
			# use the add command to add the project
			"$_SCRIPT_DIR/add" "$project_name" "$project_path"
		else
			log "$project_name :\npjt add '$project_name' '$project_path'\n" 0
    fi
  fi
done
