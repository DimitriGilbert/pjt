#!/bin/bash
# @parseArger-begin
# @parseArger-help "Manage the configuration" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-leftovers leftovers
# @parseArger-declarations
# @parseArger pos target "The subcommand to run" --subcommand-directory "bin/_config" --subcommand-run --subcommand-use-leftovers --subcommand --one-of "add" --one-of "remove" --one-of "show"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_target="";
_one_of_arg_target=("add" "remove" "show" "add" );
_arg_subcommand_arg="_arg_target";
__subcommand=();
# OPTIONALS ARGUMENTS
# FLAGS
# NESTED
# LEFTOVERS
_arg_leftovers=()
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [ "$__cli_arg_count" -ge 2 ]; then
		# echo "$0 sub command help
	#"
		_triggerSCHelp=0;
		_helpHasBeenPrinted=0;
	else
	

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "Manage the configuration:"
	echo -e "	target: The subcommand to run [one of 'add' 'remove' 'show' 'add']"
	echo -e "Usage :
	$0 <target>";
	fi

	fi
	

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help;
				;;
			-h*)
				print_help;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="target"
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_target ";
	_leftovers_count=$((${#_positionals[@]} - 1))
	for ((ii = 0; ii < _leftovers_count; ii++));do
		_positional_names="$_positional_names _arg_leftovers[$((ii + 0))]";
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		if ! [[ "$_positional_name" =~ "_arg_leftovers" ]];then
			eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
			
			if [ "$_arg_subcommand_arg" == "$_positional_name" ];then
				if [ -f "bin/_config/${1}" ] && command -v "bin/_config/${1}" > /dev/null 2>&1;then
					__subcommand+=("bin/_config/${1}");
				elif [ -f "$_SCRIPT_DIR/bin/_config/${1}" ] && command -v "$_SCRIPT_DIR/bin/_config/${1}" > /dev/null 2>&1;then
					__subcommand+=("$_SCRIPT_DIR/bin/_config/${1}");
				elif [[ "bin/_config/" == $(basename "$_SCRIPT_DIR")* ]];then
					cmdToSub="$(basename "$_SCRIPT_DIR")";
					cmdsubDir="bin/_config/";
					__subcommand+=("$_SCRIPT_DIR${cmdsubDir#"${cmdToSub}"}${1}");
				else
					__subcommand+=("$_SCRIPT_DIR/bin/_config/${1}");
				fi
			fi
		fi
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	target: ${_arg_target}";
	echo -e "	leftovers: ${_arg_leftovers[*]}";

}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;


__subcommand+=("${_arg_leftovers[@]}");
if [ "$_triggerSCHelp" == "0" ];then
	__subcommand+=("--help");
fi
if [ "$_verbose_level" -ne "0" ];then
	__subcommand+=("--verbose" "$_verbose_level");
fi
"${__subcommand[@]}";

# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end
