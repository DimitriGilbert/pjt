#!/bin/bash
# @parseArger-begin
# @parseArger-help "Add an existing project" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
# @parseArger-declarations
# @parseArger pos name "The name of the existing project to add"
# @parseArger pos path "The path of the existing project to add" --complete "directory"
# @parseArger opt config-dir "pjt config directory"
# @parseArger opt description "project description"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_name="";
_arg_path="";
# OPTIONALS ARGUMENTS
_arg_config_dir=
_arg_description=
# FLAGS
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "Add an existing project:"
	echo -e "	name: The path of the existing project to add"
	echo -e "	path: The path of the existing project to add"
	echo -e "	--config-dir <config-dir>: pjt config directory"
	echo -e "	--description <description>: project description"
	echo -e "Usage :
	$0 <name> <path> [--config-dir <value>] [--description <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--config-dir)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_config_dir="$2"
				shift
				;;
			--config-dir=*)
				_arg_config_dir="${_key##--config-dir=}"
				;;
			
			--description)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_description="$2"
				shift
				;;
			--description=*)
				_arg_description="${_key##--description=}"
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="name path"
	if [ "${_positionals_count}" -gt 2 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 2 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 2 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_name _arg_path ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	name: ${_arg_name}";
	echo -e "	path: ${_arg_path}";
	echo -e "	config-dir: ${_arg_config_dir}";
	echo -e "	description: ${_arg_description}";

}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

# Load common functions
source "$(dirname "$0")/common"

# Ensure the required argument is provided
if [ -z "$_arg_path" ]; then
  log "Error: project-path is required" -1
  exit 1
fi

project_path=$(realpath "$_arg_path");

log "Adding project: $project_path" 1

# Check if the project directory exists
if [ ! -d "$project_path" ]; then
  log "Error: The project path does not exist" -1
  exit 1
fi

# Verify the project is a git directory
if [ ! -d "$project_path/.git" ]; then
  log "Error: The project path is not a git directory" -1
  exit 1
fi

# Ensure the configuration file exists
config_path=$(get_config_path "$_arg_config_dir")
if [ ! -f "$config_path" ]; then
  log "No configuration file found at $config_path" -1
  exit 1
fi

# Add the project to the main configuration
project_name=$(basename "$project_path")
yq eval --inplace ".projects[\"$project_name\"] = {\"name\": \"$project_name\", \"path\": \"$project_path\"}" "$config_path"

# Create the project configuration directory if it doesn't exist
project_config_dir="$(get_config_dir "$_arg_config_dir")/projects"
mkdir -p "$project_config_dir"

# Create the project-specific configuration file
project_config_path="$project_config_dir/$project_name.yaml"
touch "$project_config_path"

# Retrieve git repository information
remotes=""
git_remotes=$(git -C "$project_path" remote -v | awk '{print $1}' | uniq)
for remote in "${git_remotes[@]}"; do
  remote_url=$(git -C "$project_path" remote get-url "$remote" 2>/dev/null || echo "Unknown")
  remotes+="
	- name: $remote
    url: $remote_url"
done
# Populate the project-specific configuration file
cat <<E_OF > "$project_config_path"
name: $project_name
path: $project_path
description: $_arg_description
config:
  remotes: $remotes
E_OF

log "Project $project_name added successfully with its configuration." 1
